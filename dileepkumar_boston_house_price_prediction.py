# -*- coding: utf-8 -*-
"""Dileepkumar Boston House price prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qArKmvUyAezWlmeICvqVB3z1-WKlPSOo

#Boston house price prediction

---
"""

# Commented out IPython magic to ensure Python compatibility.
# Importing the libraries
import pandas as pd
import numpy as np
from sklearn import metrics
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

# Importing the boston housing dataset
from sklearn.datasets import load_boston
boston = load_boston()

# Initializing the dataframe
data = pd.DataFrame(boston.data)

#See head of the Dataset
data.head()

"""1.	CRIM - per capita crime rate by town
2.	ZN - proportion of residential land zoned for lots over 25,000 sq.ft.
3.	INDUS - proportion of non-retail business acres per town.
4.	CHAS - Charles River dummy variable (1 if tract bounds river; 0 otherwise)
5.	NOX - nitric oxides concentration (parts per 10 million)
6.	RM - average number of rooms per dwelling
7.	AGE - proportion of owner-occupied units built prior to 1940
8.	DIS - weighted distances to five Boston employment centres
9.	RAD - index of accessibility to radial highways
10.	TAX - full-value property-tax rate per $10,000
11.	PTRATIO - pupil-teacher ratio by town

12.	B - 1000(Bk - 0.63)^2 where Bk is the proportion of blacks by town
13.	LSTAT - % lower status of the population
14.	MEDV - Median value of owner-occupied homes in $1000's

"""

#Adding the feature names to the dataframe
data.columns = boston.feature_names
data.head()

#Adding target variable to dataframe
data['PRICE'] = boston.target
#Median value of owner_occupied homes in $1000s

#Check the shape of dataframe
data.shape

data.columns

data.dtypes

#Identifying the unique number od values in the dataset

data.nunique()

"""###Checking the missing values"""

data.isnull().sum()

"""###See rows with missing values"""

data[data.isnull().any(axis=1)]

"""###Viewing the data statistics

"""

data.describe()

"""###Finding out the correlation between the features

"""

corr = data.corr()
corr.shape

"""###Plotting the heatmap of correlation between feature

"""

plt.figure(figsize=(20,20))
sns.heatmap(corr, cbar=True, square=True,fmt='.1f', annot=True,annot_kws={'size':15}, cmap='Blues')

"""###Splitting target varibable and independet variables

"""

X = data.drop(['PRICE'], axis=1)
y=data['PRICE']

"""###Splitting to training and testing data"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.3, random_state=4)

"""##Linear Regression

###Training the mode
"""

#import library for Linear regression
from sklearn.linear_model import LinearRegression

#create a linear regresser
lm = LinearRegression()

#Train the model using the training sets
lm.fit(X_train, y_train)

#Value of y intercept
lm.intercept_

#Converting the coefficient values to a dataframe
coeffcients = pd.DataFrame([X_train.columns,lm.coef_]).T
coeffcients = coeffcients.rename(columns={0: 'Attribute', 1: 'Coefficients'})
coeffcients

"""###Model Evalution"""

#Model prediction on train data
y_pred = lm.predict(X_train)

#Model evaluation
print('R^2: ', metrics.r2_score(y_train, y_pred))
print("Adjusted R^2: ", 1-(1-metrics.r2_score(y_train, y_pred))*(len(y_train)-1)/(len(y_train)-X_train.shape[1]-1))

print("MAE: ", metrics.mean_absolute_error(y_train, y_pred))

print("MSE: ", metrics.mean_squared_error(y_train, y_pred))

print("RMSE: ", np.sqrt(metrics.mean_squared_error(y_train, y_pred)))

"""ùëÖ^2 : It is a measure of the linear relationship between X and Y. It is interpreted as the proportion of the variance in the dependent variable that is predictable from the independent variable.

Adjusted ùëÖ^2 :The adjusted R-squared compares the explanatory power of regression models that contain different numbers of predictors.

MAE : It is the mean of the absolute value of the errors. It measures the difference between two continuous variables, here actual and predicted values of y.

MSE: The mean square error (MSE) is just like the MAE, but squares the difference before summing them all instead of using the absolute value.

RMSE: The mean square error (MSE) is just like the MAE, but squares the difference before summing them all instead of using the absolute value.
"""

#Visualizing the differences between actual prices and predicted values
plt.scatter(y_train, y_pred)
plt.xlabel("Prices")
plt.ylabel("Predicted Prices")
plt.title("Prices vs Predicted prices(Using scatter plot)", fontsize=15)
plt.show()

#Cheking residuals
plt.scatter(y_pred, y_train-y_pred)
plt.title("Predicted vs Residuals(Using Scatter plot)", fontsize=15)
plt.xlabel("Predicted")
plt.ylabel("Residuals")
plt.show()

"""There is no pattern visible in this plot and values are distributed equally around zero. So Linearity assumption is satisfied"""

#Checkign Normality of errors

sns.distplot(y_train-y_pred)
plt.title("Histogram of Residuals(Using Histogram)", fontsize=15)
plt.xlabel("Residual")
plt.ylabel("Frequency")
plt.show()

"""Here the residuals are normally distributed. So normality assumption is satisfied

###For test data
"""

#Predicting test data with the model
y_test_pred = lm.predict(X_test)

#Model Evaluation
acc_linreg = metrics.r2_score(y_test, y_test_pred)
print("R^2: ", acc_linreg)

print("Adjusted R^2: ", 1-(1-metrics.r2_score(y_test, y_test_pred))*(len(y_test)-1)/(len(y_test)-X_test.shape[1]-1))

print("MAE: ", metrics.mean_absolute_error(y_test, y_test_pred))

print("MSE: ", metrics.mean_squared_error(y_test, y_test_pred))

print("RMSE: ", np.sqrt(metrics.mean_squared_error(y_test, y_test_pred)))

"""Here the model evaluations scores are almost matching with that of train data. So the model is not overfitting.

##Random Forest Regressor

###Train the model
"""

#Import random forest regressor
from sklearn.ensemble import RandomForestRegressor

#create a random forest regressor
reg = RandomForestRegressor()

#Train the model using the training sets
reg.fit(X_train, y_train)

"""##Model Evaluation"""

#model prediction on train data
y_pred = reg.predict(X_train)

# Model Evaluation

print('R^2:',metrics.r2_score(y_train, y_pred))

print('Adjusted R^2:',1 - (1-metrics.r2_score(y_train, y_pred))*(len(y_train)-1)/(len(y_train)-X_train.shape[1]-1))

print('MAE:',metrics.mean_absolute_error(y_train, y_pred))

print('MSE:',metrics.mean_squared_error(y_train, y_pred))

print('RMSE:',np.sqrt(metrics.mean_squared_error(y_train, y_pred)))

#Visualizing the differences between actual prices and predicted values

plt.scatter(y_train, y_pred)
plt.xlabel("Prices")
plt.ylabel("Predicted Prices")
plt.title("Prices vs Predicted prices(Using Scatter)", fontsize=15)
plt.show()

#Checking residuals
plt.scatter(y_pred, y_train-y_pred)
plt.title("Predicted vs Residuals(Using Scatter)", fontsize=15)
plt.xlabel("Predicted")
plt.ylabel("Residuals")
plt.show()

"""###For Test data"""

#Predicting test data with the model
y_test_pred = reg.predict(X_test)

#Model Evaluation
acc_rf = metrics.r2_score(y_test, y_test_pred)

print('R^2: ', acc_rf)

print("Adjusted R^2: ", 1-(1-metrics.r2_score(y_test, y_test_pred))*(len(y_test)-1)/(len(y_test)-X_test.shape[1]-1))

print("MAE: ", metrics.mean_absolute_error(y_test, y_test_pred))

print("MSE: ", metrics.mean_squared_error(y_test, y_test_pred))

print("RMSE: ", np.sqrt(metrics.mean_squared_error(y_test, y_test_pred)))

"""###XGBoost Regressor

####Training the model
"""

#Import XGBoost Regressor
from xgboost import XGBRegressor

#Create a XGBoost Regressor
reg = XGBRegressor()

#Train the model using the training sets
reg.fit(X_train, y_train)

"""max_depth (int) ‚Äì Maximum tree depth for base learners.

learning_rate (float) ‚Äì Boosting learning rate (xgb‚Äôs ‚Äúeta‚Äù)

n_estimators (int) ‚Äì Number of boosted trees to fit.

gamma (float) ‚Äì Minimum loss reduction required to make a further partition on a leaf node of the tree.

min_child_weight (int) ‚Äì Minimum sum of instance weight(hessian) needed in a child.

subsample (float) ‚Äì Subsample ratio of the training instance.

colsample_bytree (float) ‚Äì Subsample ratio of columns when constructing each tree.

objective (string or callable) ‚Äì Specify the learning task and the corresponding learning objective or a custom objective function to be used (see note below).

nthread (int) ‚Äì Number of parallel threads used to run xgboost. (Deprecated, please use n_jobs)

scale_pos_weight (float) ‚Äì Balancing of positive and negative weights.

###Model Evaluation
"""

#model prediction on train data
y_pred = reg.predict(X_train)

#Model Evaluation

print("R^2: ", metrics.r2_score(y_train, y_pred))

print("Adjusted R^2: ", 1-(1-metrics.r2_score(y_train, y_pred))*(len(y_train)-1)/(len(y_train)-X_train.shape[1]-1))

print("MAE: ", metrics.mean_absolute_error(y_train, y_pred))

print("MSE: ", metrics.mean_squared_error(y_train, y_pred))

print("RMSE: ", np.sqrt(metrics.mean_squared_error(y_train, y_pred)))

#Visualizing the differences between actual prices and predicted values

plt.scatter(y_train, y_pred)
plt.xlabel("Prices")
plt.ylabel("Predicted Prices")
plt.title("Prices vs Predicted prices(Using Scatter)", fontsize=15)
plt.show()

#Checking residuals
plt.scatter(y_pred, y_train-y_pred)
plt.title("Predicted vs Residuals(Using Scatter)", fontsize=15)
plt.xlabel("Predicted")
plt.ylabel("Residuals")
plt.show()

"""###For test Data"""

#Predicting Test data with the model
y_test_pred = reg.predict(X_test)

# Model Evaluation
acc_xgb = metrics.r2_score(y_test, y_test_pred)
print("R^2: ", acc_xgb)
print("Adjusted R^2: ", 1-(1-metrics.r2_score(y_test, y_test_pred))*(len(y_test)-1)/(len(y_test)-X_test.shape[1]-1))
print("MAE: ", metrics.mean_absolute_error(y_test, y_test_pred))
print("MSE: ", metrics.mean_squared_error(y_test, y_test_pred))
print("RMSE: ", np.sqrt(metrics.mean_squared_error(y_test, y_test_pred)))

"""###SVM Regressor"""

# Creating scaled set to be used in model to improve our results

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

"""###Train the model"""

#Import SVM Regressor
from sklearn import svm

#create a SVM Regressor
reg = svm.SVR()

#Train the model using the training sets
reg.fit(X_train, y_train)

"""C : float, optional (default=1.0): The penalty parameter of the error term. It controls the trade off between smooth decision boundary and classifying the training points correctly.

kernel : string, optional (default='rbf‚Äô): kernel parameters selects the type of hyperplane used to separate the data. It must be one of 'linear', 'poly', 'rbf', 'sigmoid', 'precomputed‚Äô or a callable.

degree : int, optional (default=3): Degree of the polynomial kernel function (‚Äòpoly‚Äô). Ignored by all other kernels.

gamma : float, optional (default='auto‚Äô): It is for non linear hyperplanes. The higher the gamma value it tries to exactly fit the training data set. Current default is 'auto' which uses 1 / n_features.

coef0 : float, optional (default=0.0): Independent term in kernel function. It is only significant in 'poly' and 'sigmoid'.

shrinking : boolean, optional (default=True): Whether to use the shrinking heuristic.

###Model Evaluation

---
"""

#Model prediction on train data
y_pred = reg.predict(X_train)

# Model Evaluation
print("R^2: ", metrics.r2_score(y_train, y_pred))

print("Adjusted R^2: ", 1-(1-metrics.r2_score(y_train, y_pred))*(len(y_train)-1)/(len(y_train)-X_train.shape[1]-1))

print("MAE: ", metrics.mean_absolute_error(y_train, y_pred))

print("MSE: ", metrics.mean_squared_error(y_train, y_pred))

print("RMSE: ", np.sqrt(metrics.mean_squared_error(y_train, y_pred)))

#Visualizing the differences between actual prices an dpredicted values

plt.scatter(y_train, y_pred)
plt.xlabel("Prices")
plt.ylabel("Predicted Prices")
plt.title("Prices vs Predicted Prices(Using Scatter)", fontsize=15)
plt.show()

#Checking residuals
plt.scatter(y_pred, y_train-y_pred)
plt.title("Predicted vd Residuals(Using Scatter)", fontsize=15)
plt.xlabel("Predicted")
plt.ylabel("Residuals")
plt.show()

"""###For test data"""

#Predicting Test data with the model

y_test_pred = reg.predict(X_test)

#Model Evaluation

acc_svm = metrics.r2_score(y_test,y_test_pred)

print('R^2:', acc_svm)

print('Adjusted R^2:',1 - (1-metrics.r2_score(y_test, y_test_pred))*(len(y_test)-1)/(len(y_test)-X_test.shape[1]-1))

print('MAE:',metrics.mean_absolute_error(y_test, y_test_pred))

print('MSE:',metrics.mean_squared_error(y_test, y_test_pred))

print('RMSE:',np.sqrt(metrics.mean_squared_error(y_test, y_test_pred)))

"""##Evaluation and comparision of all the models"""

models = pd.DataFrame({
    'Model':['Linear Regression', 'Random Forest', 'XGBoost', "Support Vector Machines"], 'R-Squared Score': [acc_linreg*100, acc_rf*100, acc_xgb*100, acc_svm*100]
})
models.sort_values(by="R-Squared Score", ascending=False)

"""#Hence XGBoost Regression works the best for this dataset."""

